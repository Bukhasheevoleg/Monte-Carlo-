#include <iostream> 
#include<ctime> 
#include <cmath> 
#include <fstream> 
#include <math.h> 

#define _CRT_SECURE_NO_WARNINGS 
#define _USE_MATH_DEFINES 
#define M_PI 3.14159265358979323846 

using namespace std;
const double m = 1;//сторона квадрата
const int n = 10;
const int N = 10.E4;//quantity
const double h = m / n;//шаг


//генерирование узла
void node(int n, int &a, int &b) {

	a = rand() % (n - 1) + 1;
	b = rand() % (n - 1) + 1;
}
//коэффициент с(x,y)
double coff(double x, double y) {
	double c;
	c = /*3.0/(h*h)+1*/ 1000000;
	return c;
}
//коэффициент S(x,y)
double coff_S(double x, double y) {
	double c;
	c = 0;
	return c;
}
//коэффициент D(x,y)
double coff_D(double x, double y) {
	double c;
	c = 100;
	return c;
}
//P выживания
double weight(double a1, double b1) {
	double x = h * b1;
	double y = m - h * a1;

	return  4.0 / (4 + coff(x, y)*h*h/coff_D(x,y));

}
//P отражения от границы
double jumpweight(double a1, double b1) {
	double x = h * b1;
	double y = m - h * a1;
	return coff_D(x, y) / (coff_D(x, y) + coff_S(x, y)*h);
}
//точное решение
double func(double x, double y) {
	double c,tmp;

	
	tmp = sqrt(coff(x, y) /( coff_D(x,y)*2));
	/*c = exp(x*tmp)* exp( y * tmp);*/
	c = sin(tmp*x)*sin(tmp*y);
	return c;
}
//краевые условия(boundary condition)
double bc(double a1, double b1) {
	double g, x, y,tmp;
	x = h * b1;
	y = m - h * a1;
	tmp = sqrt(coff(x, y) / (coff_D(x, y) * 2));
	/*if (x == 1 || y == 1)g = coff_D(x, y)* func(x, y)*tmp + coff_S(x, y)*func(x, y);
	else g = -coff_D(x, y)* func(x, y)*tmp + coff_S(x, y)*func(x, y);*/


	if (x == 1)g = coff_D(x, y)*tmp*cos(tmp*x)*sin(tmp*y) + coff_S(x, y)*func(x, y);
	else
	if(x==0)g = -coff_D(x, y)*tmp*cos(tmp*x)*sin(tmp*y) + coff_S(x, y)*func(x, y);
	else
	if (y== 1)g = coff_D(x, y)*tmp*sin(tmp*x)*cos(tmp*y) + coff_S(x, y)*func(x, y);
	else
	if (y == 0)g = -coff_D(x, y)*tmp*sin(tmp*x)*cos(tmp*y) + coff_S(x, y)*func(x, y);


	return g;
}

//internal condition(внутреннее условие)
double ic(double a1, double b1) {
	double f, x, y;
	x = h * b1;
	y = m - h * a1;

	/*f = 0;*/
	f = 2 * coff(x, y)*func(x,y)/coff_D(x,y);
	return f;
}


double sgn(double x) {
	if (x > 0)return 1;
	if (x == 0)return 0;
}

void create(double **&A) {
	for (int i = 0; i < n + 1; i++) {
		A[i] = new double[n + 1];
	}
}
void zero(double **&A)
{
	for (int i = 0; i < n + 1; i++) {
		for (int j = 0; j < n + 1; j++) {
			A[i][j] = 0;
		}
	}

}
void walk(double **&A, int &a, int &b,double **&B) {
	int k;
	int j = 1;
	double WEIGHT = weight(a, b);
	double pr,pr2;
	double Q;
	
	while (a != 0 && b != 0 && a != n && b != n) {

		pr = (double)(rand()) / RAND_MAX;
		if (pr <= WEIGHT) {
			k = rand() % 4;
			switch (k) {
				//вниз
			case 0: {
				if (a + 1 != n)
				{
					A[a + 1][b] = A[a + 1][b] + 1; a++;
				}
				else {
					a++;
					break;
				}
			}
					break;
					//вверх
			case 1: {
				if (a - 1 != 0)
				{
					A[a - 1][b] = A[a - 1][b] + 1; a--;
				}
				else { a--; break; }
			}
					break;
					//вправо
			case 2: {
				if (b + 1 != n) { A[a][b + 1] = A[a][b + 1] + 1; b++; }
				else { b++; break; }
			}
					break;
					//вниз
			case 3: {
				if (b - 1 != 0) { A[a][b - 1] = A[a][b - 1] + 1; b--; }
				else { b--; break; }
			}
					break;
			}


			

			//Проверка на отпрыгивание назад
			if (b == 0 || b == n || a == 0 || a == n) {
				pr2 = (double)(rand()) / RAND_MAX;
				if (pr2 <= jumpweight(a, b)) {
					if (k == 0)
					{			
						a--;
						
					}
					if (k == 1)
					{			
						a++;
						
					}
					if (k == 2)
					{					
						b--;
						
					}
					if (k == 3)
					{		
						b++;
				
						
					}
					A[a][b] = A[a][b] + 1;
				}
			}

			WEIGHT = weight(a, b);

		}
		else break;



	}
	////ненулевые граничные условия
	//if (a == n || b == n || a == 0 || b == 0) {
	//	Q = bc(a, b) / coff_S(h*b, m - h * a);

	//	for (int i = 0; i < n + 1; i++) {
	//		for (int j = 0; j < n + 1; j++) {
	//			B[i][j] = B[i][j] + sgn(A[i][j])*Q;
	//		}
	//	}

	//}

}
int main()
{
	ofstream out1;
	ofstream out2;
	ofstream out3;
	out1.open("odin.txt");
	out2.open("2.plt");
	out3.open("tri.txt");
	//grid
	double **A = new double*[n + 1];
	create(A);
	zero(A);
	//веса узлов
	double **B = new double*[n + 1];
	create(B);
	zero(B);

	//учет траекторий посетивших узел
	double **K = new double*[n + 1];
	create(K);
	zero(K);
	//счетчик для нулевых граничных условий
	double **C = new double*[n + 1];
	create(C);
	zero(C);

	int a, b;//строка и столбец узла
	double S = 0;//cчетик для локального решения
	double d;//f(Po,i)
	double start = clock();
	double Q;
	
	for (int k = 0; k < N; k++) {

		//обнуление траектории
		zero(A);
		node(n, a, b);

		//нулевые граничные условия
		d = ic(a, b);
		A[a][b] = A[a][b] + 1;
		

		
		//движение частицы по сетке
		walk(A, a, b,B);
		


		//0ые граничные условия
		for (int i = 0; i < n + 1; i++) {
			for (int j = 0; j < n + 1; j++) {
				C[i][j] = C[i][j] + A[i][j] * d;
			}
		}

		


		//ненулевые граничные условия
		if (a == n || b == n || a == 0 || b == 0) {
			Q = bc(a, b) / coff_S(h*b,m-h*a);
			
			for (int i = 0; i < n + 1; i++) {
				for (int j = 0; j < n + 1; j++) {
					B[i][j] = B[i][j] + sgn(A[i][j])*Q;
				}
			}
		
		}


		//учет траекторий посетивших узел
		for (int i = 0; i < n + 1; i++) {
			for (int j = 0; j < n + 1; j++) {
				K[i][j] += sgn(A[i][j]);
			}
		}
		
	}
	
	/*cout <<" B:" << endl;
	for (int i = 0; i < n + 1; i++) {
		for (int j = 0; j < n + 1; j++) {
			cout<<B[i][j]<<" ";
		}
		cout << endl;
	}
	cout << endl << endl << endl;
	cout << " K:" << endl;
	for (int i = 0; i < n + 1; i++) {
		for (int j = 0; j < n + 1; j++) {
			cout << K[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl << endl << endl;

	cout << " C:" << endl;
	for (int i = 0; i < n + 1; i++) {
		for (int j = 0; j < n + 1; j++) {
			cout << C[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl << endl << endl;*/
	double end = clock();
	double time = (end - start) / CLOCKS_PER_SEC;

	double x = 0;
	int i = n / 2;

	double G;

	G = ((n - 1)*(n - 1)*h*h) / (N * 4);

	for (int j = 0; j < n + 1; j++)
	{
		out1 << x << " " << func(x, m - i * h) << endl;
		if (j == 0 || j == n) {
			out3 << x << " " << func(x, m - i * h) << endl;
		}
		else {
			out3 << x << " " << (B[i][j] / K[i][j] + C[i][j] * G) << endl; ;
		}
		x = x + h;
	}
	cout << m - i * h << endl;
	cout << "time:" << time<<endl;
	out2 << "set xrange[" << 0 - fabs(0.1*m) << ":" << m + fabs(0.1*m) << "]" << endl;
	cout <<"P survive "<<weight(0, 0) << endl;
	cout <<"P jump " <<jumpweight(0, 0) << endl;

	out2 << "plot 'C:/Users/днс/source/repos/ConsoleApplication35/ConsoleApplication35/odin.txt'  with lines  title 'точное решение','C:/Users/днс/source/repos/ConsoleApplication35/ConsoleApplication35/tri.txt'  with lines  title 'приближенное решение' " << endl;
	out1.close();
	out2.close();
	out3.close();
	system("start 2.plt");
}


