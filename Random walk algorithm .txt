#include <iostream> 
#include<ctime> 
#include <cmath> 
#include <fstream> 
#include <math.h> 


#define _CRT_SECURE_NO_WARNINGS 
#define _USE_MATH_DEFINES 
#define M_PI 3.14159265358979323846 

using namespace std;
const double m=1;//сторона квадрата
const int n = 10;
const int N= 10.E3;//quantity
const double h = m / n;//шаг
const double epsilon = 0.000001;
const double gamma = -1;




//exact sollution
double* func(double x,double y) {
	double* R = new double[2];
	R[0] = x*x*x/3+2*y;
	R[1] = x*x-y*y;
	return R;
}

//boundary conditions
double* bc(double x, double y) {
	
	return func(x,y);
}
bool GAMMAEPSILON(double x, double y) {
	
	if (x > 1 - epsilon || x < epsilon ||y<epsilon||y>1-epsilon )return true;
	else return false;

}
double* H(double x, double y) {
	
	double* R = new double[2];
	if (GAMMAEPSILON(x,y)==true) {
		R[0] =bc(x,y)[0] ;
		R[1] =bc(x,y)[1] ;
	}
	else {
		R[0] = 0;
		R[1] = 0;
	}
	return R;
}



double dist(double x, double y) {
	

	return fmin(fmin(fmin(x,1-x),y),1-y);
}

double* multiplay(double **A, double*U) {
	double* result = new double[2];
	result[0] = A[0][0] * U[0] + A[0][1] * U[1];
	result[1] = A[1][0] * U[0] + A[1][1] * U[1];
	return result;
}



void walk(double &x,double &y,double **&Qn) {
	
		
	double phi;
	double r;
	int k = 1;
	

	

	while (GAMMAEPSILON(x,y)==false) {
		
		phi = (double)(rand()) /RAND_MAX* (2*M_PI);
		r = dist(x, y);
		x = x + r * cos(phi);
		y = y + r * sin(phi);
		if (k == 1) {
			Qn[0][0] = 1;
			Qn[0][1] = (gamma / 2)*r*cos(phi);
			Qn[1][0] = 0;
			Qn[1][1] = 1;
			k = 2;
		}
		else 
			Qn[0][1] += (gamma / 2) *r * cos(phi);
		
			
		}
		

}

double * kvadrat(double*R) {
	double *result = new double[2];
	result[0] = R[0] * R[0];
	result[1] = R[1] * R[1];
	return result;
}

int main()
{
	setlocale(LC_ALL, "Russian"); setlocale(LC_ALL, "Russian");
	double x0 = 1.0 / 4;
	double y0 = 1.0 / 4;
	double x, y;
	double *Result = new double[2];
	Result[0] = 0;
	Result[1] = 0;


	double*ksi= new double[2];
	double*ksi2 = new double[2];

	double **Qn = new double*[2];
	Qn[0] = new double[2];
	Qn[1] = new double[2];
	
	double* sigma=new double[2];

	double*Help = new double[2];
	Help[0] = 0;
	Help[1] = 0;

	for (int i = 0; i < N; i++) {
		x = x0;
		y = y0;
		
        //движение частицы по сетке
		walk(x,y,Qn);
		ksi = multiplay(Qn, H(x, y));
		Qn[0][1] *= 2;
		ksi2 = multiplay(Qn, kvadrat(H(x,y)));
		Result[0] += ksi[0];
		Result[1] += ksi[1];
		Help[0] += ksi2[0];
		Help[1] += ksi2[1];
	
	}
	
	Result[0] /= N;
	Result[1] /= N;
	Help[0] /= N;
	Help[1] /= N;

	sigma[0] = Help[0] - Result[0] * Result[0];
	sigma[1] = Help[1] - Result[1] * Result[1];



	cout << "ДИ для U: " << 3 * sqrt(sigma[0]) / sqrt(N)<<endl;
	cout << "ДИ для тета: " << 3 * sqrt(sigma[1]) / sqrt(N) << endl;
	cout <<"Функция U= " <<Result[0] << endl;
	cout << "Функция тета= "<<Result[1] << endl;



	if (fabs(func(x0, y0)[0] - Result[0]) < 3 * sqrt(sigma[0]) / sqrt(N))cout << "U лежит в ДИ" << endl;
	else cout << "U не лежит в ДИ" << endl;
	if (fabs(func(x0, y0)[1] - Result[1]) < 3 * sqrt(sigma[1]) / sqrt(N))cout << "Тета лежит в ДИ" << endl;
	else cout << "Тета не лежит в ДИ" << endl;
	}


